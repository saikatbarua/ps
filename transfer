# azure-pipelines.yml
trigger:
  - main

parameters:
  - name: configFileName
    displayName: 'Override Configuration File Name'
    type: string
    default: ''
    help: 'Specify the filename for an override configuration file. Leave empty to use the default config.properties.'

stages:
  - stage: Build
    jobs:
      - job: LoadAndOverrideConfig
        displayName: 'Load and Override Configurations'
        pool:
          vmImage: 'windows-latest'
        
        steps:
          - script: |
              # Define the base directory
              BASE_DIR="C:\\Users\\UserName\\Desktop\\test"
              
              # Determine the configuration file to use
              if [ -n "${{ parameters.configFileName }}" ]; then
                CONFIG_FILE="${BASE_DIR}\\${{ parameters.configFileName }}"
              else
                CONFIG_FILE="${BASE_DIR}\\config.properties"
              fi

              # Check if the config file exists
              if [ ! -f "$CONFIG_FILE" ]; then
                echo "Error: Config file $CONFIG_FILE not found."
                exit 1
              fi

              # Load properties from the selected config file
              declare -A properties

              # Function to load properties into the 'properties' array
              load_properties() {
                local file=$1
                while IFS='=' read -r key value; do
                  if [[ ! "$key" =~ ^# && "$key" != "" ]]; then
                    properties[$key]=$value
                  fi
                done < "$file"
              }

              # Load properties from the determined config file
              load_properties "$CONFIG_FILE"
              echo "Configuration loaded from $CONFIG_FILE."

              # Export each property as an Azure DevOps pipeline variable
              for key in "${!properties[@]}"; do
                echo "##vso[task.setvariable variable=$key]${properties[$key]}"
              done
              
              echo "Configuration successfully set in the pipeline."
            displayName: 'Load Configuration Properties'
          
          # Example usage of loaded properties
          - script: |
              echo "Property1: $property1"
              echo "Property2: $property2"
            displayName: 'Use Loaded Properties'
